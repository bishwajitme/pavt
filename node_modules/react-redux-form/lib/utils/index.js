'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isValid = exports.getValidity = exports.getValue = exports.getEventValue = exports.isTouched = exports.isPristine = exports.isMulti = exports.isFocused = undefined;

var _endsWith = require('lodash/endsWith');

var _endsWith2 = _interopRequireDefault(_endsWith);

var _mapValues = require('lodash/mapValues');

var _mapValues2 = _interopRequireDefault(_mapValues);

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _every = require('lodash/every');

var _every2 = _interopRequireDefault(_every);

var _formReducer = require('../reducers/form-reducer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function isMulti(model) {
  return (0, _endsWith2.default)(model, '[]');
}

function isFocused(field) {
  return field && field.focus;
}

function isPristine(field) {
  return field ? field.pristine : _formReducer.initialFieldState.pristine;
}

function isTouched(field) {
  return field ? field.touched : _formReducer.initialFieldState.touched;
}

function isEvent(event) {
  return !!(event && event.stopPropagation && event.preventDefault);
}

function getEventValue(event) {
  if (!event.target) {
    if (!event.nativeEvent) {
      return undefined;
    }

    return event.nativeEvent.text;
  }

  if (event.target.multiple) {
    return [].concat(_toConsumableArray(event.target.selectedOptions)).map(function (option) {
      return option.value;
    });
  }

  return event.target.value;
}

function getValue(value) {
  return isEvent(value) ? getEventValue(value) : value;
}

function getValidity(validators, value) {
  var modelValue = getValue(value);

  if (typeof validators === 'function') {
    return validators(modelValue);
  }

  return (0, _mapValues2.default)(validators, function (validator) {
    return validator(modelValue);
  });
}

function isValid(validity) {
  if ((0, _isPlainObject2.default)(validity)) {
    return (0, _every2.default)(validity);
  }

  return !!validity;
}

exports.isFocused = isFocused;
exports.isMulti = isMulti;
exports.isPristine = isPristine;
exports.isTouched = isTouched;
exports.getEventValue = getEventValue;
exports.getValue = getValue;
exports.getValidity = getValidity;
exports.isValid = isValid;