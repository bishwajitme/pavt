'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _connect = require('react-redux/lib/components/connect');

var _connect2 = _interopRequireDefault(_connect);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _identity = require('lodash/identity');

var _identity2 = _interopRequireDefault(_identity);

var _mapValues = require('lodash/mapValues');

var _mapValues2 = _interopRequireDefault(_mapValues);

var _actions = require('../actions');

var _actions2 = _interopRequireDefault(_actions);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// TODO: Fix all eslint issues


var Form = function (_Component) {
  _inherits(Form, _Component);

  function Form(props) {
    _classCallCheck(this, Form);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Form).call(this, props));

    _this.handleSubmit = _this.handleSubmit.bind(_this);
    return _this;
  }

  _createClass(Form, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      /* eslint-disable react/prop-types */
      var _props = this.props;
      var validators = _props.validators;
      var model = _props.model;
      var dispatch = _props.dispatch;
      var validateOn = _props.validateOn;
      /* eslint-enable react/prop-types */

      if (validateOn !== 'change') return;

      (0, _mapValues2.default)(validators, function (validator, field) {
        var fieldModel = [model, field].join('.');
        var value = (0, _get3.default)(_this2.props, fieldModel);

        if (value === (0, _get3.default)(prevProps, fieldModel)) return;

        var validity = (0, _utils.getValidity)(validator, value);

        dispatch(_actions2.default.setValidity(fieldModel, validity));
      });
    }
  }, {
    key: 'handleSubmit',
    value: function handleSubmit(e) {
      var _this3 = this;

      e.preventDefault();

      /* eslint-disable react/prop-types */
      var _props2 = this.props;
      var model = _props2.model;
      var validators = _props2.validators;
      var onSubmit = _props2.onSubmit;
      var dispatch = _props2.dispatch;
      /* eslint-enable react/prop-types */

      var modelValue = (0, _get3.default)(this.props, model);

      var valid = (0, _utils.isValid)((0, _mapValues2.default)(validators, function (validator, field) {
        var fieldModel = [model, field].join('.');
        var value = (0, _get3.default)(_this3.props, fieldModel);
        var validity = (0, _utils.getValidity)(validator, value);

        dispatch(_actions2.default.setValidity(fieldModel, (0, _utils.getValidity)(validator, value)));

        return (0, _utils.isValid)(validity);
      }));

      if (onSubmit && !!valid) {
        onSubmit(modelValue);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      /* eslint-disable react/prop-types */
      return _react2.default.createElement(
        'form',
        _extends({}, this.props, {
          onSubmit: this.handleSubmit
        }),
        this.props.children
      );
      /* eslint-enable react/prop-types */
    }
  }]);

  return Form;
}(_react.Component);

Form.propTypes = {
  validators: _react.PropTypes.object,
  validateOn: _react.PropTypes.oneOf(['change']),
  model: _react.PropTypes.string.isRequired,
  onSubmit: _react.PropTypes.func
};

exports.default = (0, _connect2.default)(_identity2.default)(Form);